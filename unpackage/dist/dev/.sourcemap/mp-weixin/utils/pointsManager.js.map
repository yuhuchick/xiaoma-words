{"version":3,"file":"pointsManager.js","sources":["utils/pointsManager.js"],"sourcesContent":["/**\n * 积分管理工具类\n * 负责用户积分、签到、抽奖等功能\n */\nclass PointsManager {\n\tconstructor() {\n\t\tthis.userPointsData = null\n\t\tthis.checkInData = null\n\t}\n\n\t/**\n\t * 初始化积分管理器\n\t */\n\tasync init() {\n\t\ttry {\n\t\t\t// 从本地存储加载数据\n\t\t\tthis.loadFromStorage()\n\t\t\t\n\t\t\t// 如果没有数据，初始化默认数据\n\t\t\tif (!this.userPointsData) {\n\t\t\t\tthis.userPointsData = {\n\t\t\t\t\ttotalPoints: 0,\n\t\t\t\t\tearnedPoints: 0,\n\t\t\t\t\tusedPoints: 0,\n\t\t\t\t\tcheckInStreak: 0,\n\t\t\t\t\tlongestStreak: 0,\n\t\t\t\t\tlastCheckInDate: null,\n\t\t\t\t\tcheckInHistory: [],\n\t\t\t\t\tpointsHistory: []\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!this.checkInData) {\n\t\t\t\tthis.checkInData = {\n\t\t\t\t\tmonthlyCheckIns: {},\n\t\t\t\t\tyearlyStats: {}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tconsole.log('积分管理器初始化成功')\n\t\t\treturn true\n\t\t} catch (error) {\n\t\t\tconsole.error('积分管理器初始化失败:', error)\n\t\t\treturn false\n\t\t}\n\t}\n\n\t/**\n\t * 获取用户积分信息\n\t */\n\tgetUserPoints() {\n\t\treturn this.userPointsData || {\n\t\t\ttotalPoints: 0,\n\t\t\tearnedPoints: 0,\n\t\t\tusedPoints: 0,\n\t\t\tcheckInStreak: 0,\n\t\t\tlongestStreak: 0\n\t\t}\n\t}\n\n\t/**\n\t * 获取今日是否已签到\n\t */\n\tisTodayCheckedIn() {\n\t\tif (!this.userPointsData?.lastCheckInDate) return false\n\t\t\n\t\tconst today = new Date().toISOString().split('T')[0]\n\t\treturn this.userPointsData.lastCheckInDate === today\n\t}\n\n\t/**\n\t * 执行签到\n\t */\n\tcheckIn() {\n\t\tconst today = new Date().toISOString().split('T')[0]\n\t\t\n\t\t// 检查是否已经签到\n\t\tif (this.isTodayCheckedIn()) {\n\t\t\treturn {\n\t\t\t\tsuccess: false,\n\t\t\t\tmessage: '今日已签到',\n\t\t\t\tpoints: 0\n\t\t\t}\n\t\t}\n\n\t\t// 生成随机积分 (10-50分)\n\t\tconst points = Math.floor(Math.random() * 41) + 100\n\t\t\n\t\t// 计算连续签到天数\n\t\tlet streak = 1\n\t\tif (this.userPointsData.lastCheckInDate) {\n\t\t\tconst lastDate = new Date(this.userPointsData.lastCheckInDate)\n\t\t\tconst todayDate = new Date(today)\n\t\t\tconst diffDays = Math.round((todayDate - lastDate) / (1000 * 60 * 60 * 24))\n\t\t\t\n\t\t\tif (diffDays === 1) {\n\t\t\t\tstreak = this.userPointsData.checkInStreak + 1\n\t\t\t}\n\t\t}\n\n\t\t// 更新积分数据\n\t\tthis.userPointsData.totalPoints += points\n\t\tthis.userPointsData.earnedPoints += points\n\t\tthis.userPointsData.checkInStreak = streak\n\t\tthis.userPointsData.lastCheckInDate = today\n\t\t\n\t\t// 更新最长连续签到记录\n\t\tif (streak > this.userPointsData.longestStreak) {\n\t\t\tthis.userPointsData.longestStreak = streak\n\t\t}\n\n\t\t// 记录签到历史\n\t\tthis.userPointsData.checkInHistory.push({\n\t\t\tdate: today,\n\t\t\tpoints: points,\n\t\t\tstreak: streak\n\t\t})\n\n\t\t// 记录积分历史\n\t\tthis.userPointsData.pointsHistory.push({\n\t\t\tdate: today,\n\t\t\ttype: 'checkin',\n\t\t\tpoints: points,\n\t\t\tdescription: '每日签到'\n\t\t})\n\n\t\t// 更新月度签到数据\n\t\tconst month = today.substring(0, 7) // YYYY-MM\n\t\tif (!this.checkInData.monthlyCheckIns[month]) {\n\t\t\tthis.checkInData.monthlyCheckIns[month] = []\n\t\t}\n\t\tthis.checkInData.monthlyCheckIns[month].push(today)\n\n\t\t// 保存数据\n\t\tthis.saveToStorage()\n\n\t\treturn {\n\t\t\tsuccess: true,\n\t\t\tmessage: `签到成功！获得${points}积分`,\n\t\t\tpoints: points,\n\t\t\tstreak: streak,\n\t\t\ttotalPoints: this.userPointsData.totalPoints\n\t\t}\n\t}\n\n\t/**\n\t * 获取月度签到数据\n\t */\n\tgetMonthlyCheckIns(year, month) {\n\t\tconst monthKey = `${year}-${month.toString().padStart(2, '0')}`\n\t\treturn this.checkInData.monthlyCheckIns[monthKey] || []\n\t}\n\n\t/**\n\t * 获取签到统计\n\t */\n\tgetCheckInStats() {\n\t\treturn {\n\t\t\tcurrentStreak: this.userPointsData.checkInStreak,\n\t\t\tlongestStreak: this.userPointsData.longestStreak,\n\t\t\ttotalCheckIns: this.userPointsData.checkInHistory.length,\n\t\t\ttotalPoints: this.userPointsData.totalPoints\n\t\t}\n\t}\n\n\t/**\n\t * 使用积分\n\t */\n\tusePoints(points, reason) {\n\t\tif (this.userPointsData.totalPoints < points) {\n\t\t\treturn {\n\t\t\t\tsuccess: false,\n\t\t\t\tmessage: '积分不足'\n\t\t\t}\n\t\t}\n\n\t\tthis.userPointsData.totalPoints -= points\n\t\tthis.userPointsData.usedPoints += points\n\n\t\t// 记录积分使用历史\n\t\tthis.userPointsData.pointsHistory.push({\n\t\t\tdate: new Date().toISOString().split('T')[0],\n\t\t\ttype: 'use',\n\t\t\tpoints: -points,\n\t\t\tdescription: reason\n\t\t})\n\n\t\tthis.saveToStorage()\n\n\t\treturn {\n\t\t\tsuccess: true,\n\t\t\tmessage: `成功使用${points}积分`,\n\t\t\tremainingPoints: this.userPointsData.totalPoints\n\t\t}\n\t}\n\n\t/**\n\t * 获取积分历史\n\t */\n\tgetPointsHistory(limit = 20) {\n\t\treturn this.userPointsData.pointsHistory.slice(-limit).reverse()\n\t}\n\n\t/**\n\t * 保存数据到本地存储\n\t */\n\tsaveToStorage() {\n\t\ttry {\n\t\t\tuni.setStorageSync('userPointsData', JSON.stringify(this.userPointsData))\n\t\t\tuni.setStorageSync('checkInData', JSON.stringify(this.checkInData))\n\t\t} catch (error) {\n\t\t\tconsole.error('保存积分数据失败:', error)\n\t\t}\n\t}\n\n\t/**\n\t * 从本地存储加载数据\n\t */\n\tloadFromStorage() {\n\t\ttry {\n\t\t\tconst pointsData = uni.getStorageSync('userPointsData')\n\t\t\tif (pointsData) {\n\t\t\t\tthis.userPointsData = JSON.parse(pointsData)\n\t\t\t}\n\n\t\t\tconst checkInData = uni.getStorageSync('checkInData')\n\t\t\tif (checkInData) {\n\t\t\t\tthis.checkInData = JSON.parse(checkInData)\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('加载积分数据失败:', error)\n\t\t}\n\t}\n\n\t/**\n\t * 重置积分数据（用于测试）\n\t */\n\tresetData() {\n\t\tthis.userPointsData = {\n\t\t\ttotalPoints: 0,\n\t\t\tearnedPoints: 0,\n\t\t\tusedPoints: 0,\n\t\t\tcheckInStreak: 0,\n\t\t\tlongestStreak: 0,\n\t\t\tlastCheckInDate: null,\n\t\t\tcheckInHistory: [],\n\t\t\tpointsHistory: []\n\t\t}\n\t\tthis.checkInData = {\n\t\t\tmonthlyCheckIns: {},\n\t\t\tyearlyStats: {}\n\t\t}\n\t\tthis.saveToStorage()\n\t}\n}\n\n// 创建单例实例\nconst pointsManager = new PointsManager()\n\nexport default pointsManager\n"],"names":["uni"],"mappings":"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"}