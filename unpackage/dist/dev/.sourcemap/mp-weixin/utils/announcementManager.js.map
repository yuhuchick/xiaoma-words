{"version":3,"file":"announcementManager.js","sources":["utils/announcementManager.js"],"sourcesContent":["/**\n * 公告管理工具类\n * 负责公告和banner数据的加载、管理等功能\n */\nclass AnnouncementManager {\n\tconstructor() {\n\t\tthis.announcementData = null\n\t\tthis.banners = []\n\t\tthis.announcements = []\n\t}\n\n\t/**\n\t * 初始化公告管理器\n\t */\n\tasync init() {\n\t\ttry {\n\t\t\t// 加载公告数据\n\t\t\tconst response = await uni.request({\n\t\t\t\turl: '/static/data/announcements.json',\n\t\t\t\tmethod: 'GET'\n\t\t\t})\n\t\t\tthis.announcementData = response.data\n\t\t\t\n\t\t\t// 处理banner数据\n\t\t\tthis.banners = this.getActiveBanners()\n\t\t\t\n\t\t\t// 处理公告数据\n\t\t\tthis.announcements = this.getActiveAnnouncements()\n\t\t\t\n\t\t\tconsole.log('公告数据加载成功')\n\t\t\treturn true\n\t\t} catch (error) {\n\t\t\tconsole.error('公告数据加载失败:', error)\n\t\t\treturn false\n\t\t}\n\t}\n\n\t/**\n\t * 获取活跃的banner列表\n\t */\n\tgetActiveBanners() {\n\t\tif (!this.announcementData?.banners) return []\n\t\t\n\t\tconst now = new Date()\n\t\treturn this.announcementData.banners.filter(banner => {\n\t\t\tif (!banner.isActive) return false\n\t\t\t\n\t\t\tconst startTime = new Date(banner.startTime)\n\t\t\tconst endTime = new Date(banner.endTime)\n\t\t\t\n\t\t\treturn now >= startTime && now <= endTime\n\t\t})\n\t}\n\n\t/**\n\t * 获取活跃的公告列表\n\t */\n\tgetActiveAnnouncements(limit = 4) {\n\t\tif (!this.announcementData?.announcements) return []\n\t\t\n\t\t// 按优先级和发布时间排序\n\t\tconst sortedAnnouncements = this.announcementData.announcements.sort((a, b) => {\n\t\t\t// 优先级排序：high > medium > low\n\t\t\tconst priorityOrder = { high: 3, medium: 2, low: 1 }\n\t\t\tconst priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority]\n\t\t\t\n\t\t\tif (priorityDiff !== 0) return priorityDiff\n\t\t\t\n\t\t\t// 发布时间排序：最新的在前\n\t\t\treturn new Date(b.time) - new Date(a.time)\n\t\t})\n\t\t\n\t\treturn sortedAnnouncements.slice(0, limit)\n\t}\n\n\t/**\n\t * 获取所有公告\n\t */\n\tgetAllAnnouncements() {\n\t\treturn this.announcementData?.announcements || []\n\t}\n\n\t/**\n\t * 根据类型获取公告\n\t */\n\tgetAnnouncementsByType(type) {\n\t\tif (!this.announcementData?.announcements) return []\n\t\t\n\t\treturn this.announcementData.announcements.filter(announcement => \n\t\t\tannouncement.type === type\n\t\t)\n\t}\n\n\t/**\n\t * 获取新公告数量\n\t */\n\tgetNewAnnouncementCount() {\n\t\tif (!this.announcementData?.announcements) return 0\n\t\t\n\t\treturn this.announcementData.announcements.filter(announcement => \n\t\t\tannouncement.isNew\n\t\t).length\n\t}\n\n\t/**\n\t * 标记公告为已读\n\t */\n\tmarkAnnouncementAsRead(announcementId) {\n\t\t// 这里可以保存到本地存储，标记用户已读的公告\n\t\ttry {\n\t\t\tconst readAnnouncements = uni.getStorageSync('readAnnouncements') || []\n\t\t\tif (!readAnnouncements.includes(announcementId)) {\n\t\t\t\treadAnnouncements.push(announcementId)\n\t\t\t\tuni.setStorageSync('readAnnouncements', readAnnouncements)\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('保存已读状态失败:', error)\n\t\t}\n\t}\n\n\t/**\n\t * 检查公告是否已读\n\t */\n\tisAnnouncementRead(announcementId) {\n\t\ttry {\n\t\t\tconst readAnnouncements = uni.getStorageSync('readAnnouncements') || []\n\t\t\treturn readAnnouncements.includes(announcementId)\n\t\t} catch (error) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\t/**\n\t * 获取未读公告\n\t */\n\tgetUnreadAnnouncements() {\n\t\tif (!this.announcementData?.announcements) return []\n\t\t\n\t\treturn this.announcementData.announcements.filter(announcement => \n\t\t\t!this.isAnnouncementRead(announcement.id)\n\t\t)\n\t}\n\n\t/**\n\t * 获取公告详情\n\t */\n\tgetAnnouncementById(id) {\n\t\tif (!this.announcementData?.announcements) return null\n\t\t\n\t\treturn this.announcementData.announcements.find(announcement => \n\t\t\tannouncement.id === id\n\t\t)\n\t}\n\n\t/**\n\t * 获取banner详情\n\t */\n\tgetBannerById(id) {\n\t\tif (!this.announcementData?.banners) return null\n\t\t\n\t\treturn this.announcementData.banners.find(banner => \n\t\t\tbanner.id === id\n\t\t)\n\t}\n\n\t/**\n\t * 格式化时间\n\t */\n\tformatTimeAgo(dateString) {\n\t\tconst now = new Date()\n\t\tconst date = new Date(dateString)\n\t\tconst diffInSeconds = Math.floor((now - date) / 1000)\n\t\t\n\t\tif (diffInSeconds < 60) {\n\t\t\treturn '刚刚'\n\t\t} else if (diffInSeconds < 3600) {\n\t\t\treturn `${Math.floor(diffInSeconds / 60)}分钟前`\n\t\t} else if (diffInSeconds < 86400) {\n\t\t\treturn `${Math.floor(diffInSeconds / 3600)}小时前`\n\t\t} else if (diffInSeconds < 2592000) {\n\t\t\treturn `${Math.floor(diffInSeconds / 86400)}天前`\n\t\t} else if (diffInSeconds < 31536000) {\n\t\t\treturn `${Math.floor(diffInSeconds / 2592000)}个月前`\n\t\t} else {\n\t\t\treturn `${Math.floor(diffInSeconds / 31536000)}年前`\n\t\t}\n\t}\n\n\t/**\n\t * 更新公告数据\n\t */\n\tupdateAnnouncementData(newData) {\n\t\tthis.announcementData = newData\n\t\tthis.banners = this.getActiveBanners()\n\t\tthis.announcements = this.getActiveAnnouncements()\n\t}\n\n\t/**\n\t * 添加新公告\n\t */\n\taddAnnouncement(announcement) {\n\t\tif (!this.announcementData) {\n\t\t\tthis.announcementData = { announcements: [], banners: [] }\n\t\t}\n\t\t\n\t\t// 生成新ID\n\t\tconst maxId = Math.max(...this.announcementData.announcements.map(a => a.id), 0)\n\t\tannouncement.id = maxId + 1\n\t\t\n\t\t// 设置默认值\n\t\tannouncement.time = announcement.time || new Date().toISOString()\n\t\tannouncement.timeAgo = this.formatTimeAgo(announcement.time)\n\t\tannouncement.isNew = true\n\t\tannouncement.priority = announcement.priority || 'medium'\n\t\t\n\t\tthis.announcementData.announcements.unshift(announcement)\n\t\tthis.announcements = this.getActiveAnnouncements()\n\t}\n\n\t/**\n\t * 添加新banner\n\t */\n\taddBanner(banner) {\n\t\tif (!this.announcementData) {\n\t\t\tthis.announcementData = { announcements: [], banners: [] }\n\t\t}\n\t\t\n\t\t// 生成新ID\n\t\tconst maxId = Math.max(...this.announcementData.banners.map(b => b.id), 0)\n\t\tbanner.id = maxId + 1\n\t\t\n\t\t// 设置默认值\n\t\tbanner.isActive = true\n\t\tbanner.startTime = banner.startTime || new Date().toISOString().split('T')[0]\n\t\tbanner.endTime = banner.endTime || '2024-12-31'\n\t\t\n\t\tthis.announcementData.banners.push(banner)\n\t\tthis.banners = this.getActiveBanners()\n\t}\n\n\t/**\n\t * 删除公告\n\t */\n\tremoveAnnouncement(id) {\n\t\tif (!this.announcementData?.announcements) return false\n\t\t\n\t\tconst index = this.announcementData.announcements.findIndex(a => a.id === id)\n\t\tif (index !== -1) {\n\t\t\tthis.announcementData.announcements.splice(index, 1)\n\t\t\tthis.announcements = this.getActiveAnnouncements()\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\n\t/**\n\t * 删除banner\n\t */\n\tremoveBanner(id) {\n\t\tif (!this.announcementData?.banners) return false\n\t\t\n\t\tconst index = this.announcementData.banners.findIndex(b => b.id === id)\n\t\tif (index !== -1) {\n\t\t\tthis.announcementData.banners.splice(index, 1)\n\t\t\tthis.banners = this.getActiveBanners()\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\n\t/**\n\t * 保存数据到本地存储\n\t */\n\tsaveToStorage() {\n\t\ttry {\n\t\t\tuni.setStorageSync('announcementData', JSON.stringify(this.announcementData))\n\t\t} catch (error) {\n\t\t\tconsole.error('保存公告数据失败:', error)\n\t\t}\n\t}\n\n\t/**\n\t * 从本地存储加载数据\n\t */\n\tloadFromStorage() {\n\t\ttry {\n\t\t\tconst data = uni.getStorageSync('announcementData')\n\t\t\tif (data) {\n\t\t\t\tthis.announcementData = JSON.parse(data)\n\t\t\t\tthis.banners = this.getActiveBanners()\n\t\t\t\tthis.announcements = this.getActiveAnnouncements()\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('加载公告数据失败:', error)\n\t\t}\n\t}\n}\n\n// 创建单例实例\nconst announcementManager = new AnnouncementManager()\n\nexport default announcementManager\n"],"names":["uni"],"mappings":";;AAIA,MAAM,oBAAoB;AAAA,EACzB,cAAc;AACb,SAAK,mBAAmB;AACxB,SAAK,UAAU,CAAE;AACjB,SAAK,gBAAgB,CAAE;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKD,MAAM,OAAO;AACZ,QAAI;AAEH,YAAM,WAAW,MAAMA,cAAG,MAAC,QAAQ;AAAA,QAClC,KAAK;AAAA,QACL,QAAQ;AAAA,MACZ,CAAI;AACD,WAAK,mBAAmB,SAAS;AAGjC,WAAK,UAAU,KAAK,iBAAkB;AAGtC,WAAK,gBAAgB,KAAK,uBAAwB;AAElDA,oBAAAA,MAAY,MAAA,OAAA,sCAAA,UAAU;AACtB,aAAO;AAAA,IACP,SAAQ,OAAO;AACfA,oBAAAA,MAAc,MAAA,SAAA,sCAAA,aAAa,KAAK;AAChC,aAAO;AAAA,IACP;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKD,mBAAmB;;AAClB,QAAI,GAAC,UAAK,qBAAL,mBAAuB;AAAS,aAAO,CAAE;AAE9C,UAAM,MAAM,oBAAI,KAAM;AACtB,WAAO,KAAK,iBAAiB,QAAQ,OAAO,YAAU;AACrD,UAAI,CAAC,OAAO;AAAU,eAAO;AAE7B,YAAM,YAAY,IAAI,KAAK,OAAO,SAAS;AAC3C,YAAM,UAAU,IAAI,KAAK,OAAO,OAAO;AAEvC,aAAO,OAAO,aAAa,OAAO;AAAA,IACrC,CAAG;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKD,uBAAuB,QAAQ,GAAG;;AACjC,QAAI,GAAC,UAAK,qBAAL,mBAAuB;AAAe,aAAO,CAAE;AAGpD,UAAM,sBAAsB,KAAK,iBAAiB,cAAc,KAAK,CAAC,GAAG,MAAM;AAE9E,YAAM,gBAAgB,EAAE,MAAM,GAAG,QAAQ,GAAG,KAAK,EAAG;AACpD,YAAM,eAAe,cAAc,EAAE,QAAQ,IAAI,cAAc,EAAE,QAAQ;AAEzE,UAAI,iBAAiB;AAAG,eAAO;AAG/B,aAAO,IAAI,KAAK,EAAE,IAAI,IAAI,IAAI,KAAK,EAAE,IAAI;AAAA,IAC5C,CAAG;AAED,WAAO,oBAAoB,MAAM,GAAG,KAAK;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA,EAKD,sBAAsB;;AACrB,aAAO,UAAK,qBAAL,mBAAuB,kBAAiB,CAAE;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA,EAKD,uBAAuB,MAAM;;AAC5B,QAAI,GAAC,UAAK,qBAAL,mBAAuB;AAAe,aAAO,CAAE;AAEpD,WAAO,KAAK,iBAAiB,cAAc;AAAA,MAAO,kBACjD,aAAa,SAAS;AAAA,IACtB;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKD,0BAA0B;;AACzB,QAAI,GAAC,UAAK,qBAAL,mBAAuB;AAAe,aAAO;AAElD,WAAO,KAAK,iBAAiB,cAAc;AAAA,MAAO,kBACjD,aAAa;AAAA,IAChB,EAAI;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKD,uBAAuB,gBAAgB;AAEtC,QAAI;AACH,YAAM,oBAAoBA,cAAG,MAAC,eAAe,mBAAmB,KAAK,CAAE;AACvE,UAAI,CAAC,kBAAkB,SAAS,cAAc,GAAG;AAChD,0BAAkB,KAAK,cAAc;AACrCA,4BAAI,eAAe,qBAAqB,iBAAiB;AAAA,MACzD;AAAA,IACD,SAAQ,OAAO;AACfA,oBAAAA,MAAc,MAAA,SAAA,uCAAA,aAAa,KAAK;AAAA,IAChC;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKD,mBAAmB,gBAAgB;AAClC,QAAI;AACH,YAAM,oBAAoBA,cAAG,MAAC,eAAe,mBAAmB,KAAK,CAAE;AACvE,aAAO,kBAAkB,SAAS,cAAc;AAAA,IAChD,SAAQ,OAAO;AACf,aAAO;AAAA,IACP;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKD,yBAAyB;;AACxB,QAAI,GAAC,UAAK,qBAAL,mBAAuB;AAAe,aAAO,CAAE;AAEpD,WAAO,KAAK,iBAAiB,cAAc;AAAA,MAAO,kBACjD,CAAC,KAAK,mBAAmB,aAAa,EAAE;AAAA,IACxC;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKD,oBAAoB,IAAI;;AACvB,QAAI,GAAC,UAAK,qBAAL,mBAAuB;AAAe,aAAO;AAElD,WAAO,KAAK,iBAAiB,cAAc;AAAA,MAAK,kBAC/C,aAAa,OAAO;AAAA,IACpB;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKD,cAAc,IAAI;;AACjB,QAAI,GAAC,UAAK,qBAAL,mBAAuB;AAAS,aAAO;AAE5C,WAAO,KAAK,iBAAiB,QAAQ;AAAA,MAAK,YACzC,OAAO,OAAO;AAAA,IACd;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKD,cAAc,YAAY;AACzB,UAAM,MAAM,oBAAI,KAAM;AACtB,UAAM,OAAO,IAAI,KAAK,UAAU;AAChC,UAAM,gBAAgB,KAAK,OAAO,MAAM,QAAQ,GAAI;AAEpD,QAAI,gBAAgB,IAAI;AACvB,aAAO;AAAA,IACV,WAAa,gBAAgB,MAAM;AAChC,aAAO,GAAG,KAAK,MAAM,gBAAgB,EAAE,CAAC;AAAA,IAC3C,WAAa,gBAAgB,OAAO;AACjC,aAAO,GAAG,KAAK,MAAM,gBAAgB,IAAI,CAAC;AAAA,IAC7C,WAAa,gBAAgB,QAAS;AACnC,aAAO,GAAG,KAAK,MAAM,gBAAgB,KAAK,CAAC;AAAA,IAC9C,WAAa,gBAAgB,SAAU;AACpC,aAAO,GAAG,KAAK,MAAM,gBAAgB,MAAO,CAAC;AAAA,IAChD,OAAS;AACN,aAAO,GAAG,KAAK,MAAM,gBAAgB,OAAQ,CAAC;AAAA,IAC9C;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKD,uBAAuB,SAAS;AAC/B,SAAK,mBAAmB;AACxB,SAAK,UAAU,KAAK,iBAAkB;AACtC,SAAK,gBAAgB,KAAK,uBAAwB;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA,EAKD,gBAAgB,cAAc;AAC7B,QAAI,CAAC,KAAK,kBAAkB;AAC3B,WAAK,mBAAmB,EAAE,eAAe,CAAA,GAAI,SAAS,CAAA,EAAI;AAAA,IAC1D;AAGD,UAAM,QAAQ,KAAK,IAAI,GAAG,KAAK,iBAAiB,cAAc,IAAI,OAAK,EAAE,EAAE,GAAG,CAAC;AAC/E,iBAAa,KAAK,QAAQ;AAG1B,iBAAa,OAAO,aAAa,SAAQ,oBAAI,KAAM,GAAC,YAAa;AACjE,iBAAa,UAAU,KAAK,cAAc,aAAa,IAAI;AAC3D,iBAAa,QAAQ;AACrB,iBAAa,WAAW,aAAa,YAAY;AAEjD,SAAK,iBAAiB,cAAc,QAAQ,YAAY;AACxD,SAAK,gBAAgB,KAAK,uBAAwB;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA,EAKD,UAAU,QAAQ;AACjB,QAAI,CAAC,KAAK,kBAAkB;AAC3B,WAAK,mBAAmB,EAAE,eAAe,CAAA,GAAI,SAAS,CAAA,EAAI;AAAA,IAC1D;AAGD,UAAM,QAAQ,KAAK,IAAI,GAAG,KAAK,iBAAiB,QAAQ,IAAI,OAAK,EAAE,EAAE,GAAG,CAAC;AACzE,WAAO,KAAK,QAAQ;AAGpB,WAAO,WAAW;AAClB,WAAO,YAAY,OAAO,cAAa,oBAAI,QAAO,cAAc,MAAM,GAAG,EAAE,CAAC;AAC5E,WAAO,UAAU,OAAO,WAAW;AAEnC,SAAK,iBAAiB,QAAQ,KAAK,MAAM;AACzC,SAAK,UAAU,KAAK,iBAAkB;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA,EAKD,mBAAmB,IAAI;;AACtB,QAAI,GAAC,UAAK,qBAAL,mBAAuB;AAAe,aAAO;AAElD,UAAM,QAAQ,KAAK,iBAAiB,cAAc,UAAU,OAAK,EAAE,OAAO,EAAE;AAC5E,QAAI,UAAU,IAAI;AACjB,WAAK,iBAAiB,cAAc,OAAO,OAAO,CAAC;AACnD,WAAK,gBAAgB,KAAK,uBAAwB;AAClD,aAAO;AAAA,IACP;AACD,WAAO;AAAA,EACP;AAAA;AAAA;AAAA;AAAA,EAKD,aAAa,IAAI;;AAChB,QAAI,GAAC,UAAK,qBAAL,mBAAuB;AAAS,aAAO;AAE5C,UAAM,QAAQ,KAAK,iBAAiB,QAAQ,UAAU,OAAK,EAAE,OAAO,EAAE;AACtE,QAAI,UAAU,IAAI;AACjB,WAAK,iBAAiB,QAAQ,OAAO,OAAO,CAAC;AAC7C,WAAK,UAAU,KAAK,iBAAkB;AACtC,aAAO;AAAA,IACP;AACD,WAAO;AAAA,EACP;AAAA;AAAA;AAAA;AAAA,EAKD,gBAAgB;AACf,QAAI;AACHA,oBAAG,MAAC,eAAe,oBAAoB,KAAK,UAAU,KAAK,gBAAgB,CAAC;AAAA,IAC5E,SAAQ,OAAO;AACfA,oBAAAA,MAAc,MAAA,SAAA,uCAAA,aAAa,KAAK;AAAA,IAChC;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKD,kBAAkB;AACjB,QAAI;AACH,YAAM,OAAOA,cAAAA,MAAI,eAAe,kBAAkB;AAClD,UAAI,MAAM;AACT,aAAK,mBAAmB,KAAK,MAAM,IAAI;AACvC,aAAK,UAAU,KAAK,iBAAkB;AACtC,aAAK,gBAAgB,KAAK,uBAAwB;AAAA,MAClD;AAAA,IACD,SAAQ,OAAO;AACfA,oBAAAA,MAAc,MAAA,SAAA,uCAAA,aAAa,KAAK;AAAA,IAChC;AAAA,EACD;AACF;AAGK,MAAC,sBAAsB,IAAI,oBAAmB;;"}