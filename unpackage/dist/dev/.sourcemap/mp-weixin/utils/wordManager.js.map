{"version":3,"file":"wordManager.js","sources":["utils/wordManager.js"],"sourcesContent":["/**\n * 单词数据管理工具类\n * 负责单词数据的加载、更新、查询等功能\n */\nclass WordManager {\n\tconstructor() {\n\t\tthis.wordsData = null\n\t\tthis.userStudyData = null\n\t\tthis.currentSession = null\n\t}\n\n\t/**\n\t * 初始化数据管理器\n\t */\n\tasync init() {\n\t\ttry {\n\t\t\t// 加载单词数据\n\t\t\tconst wordsResponse = await uni.request({\n\t\t\t\turl: '/static/data/words.json',\n\t\t\t\tmethod: 'GET'\n\t\t\t})\n\t\t\tthis.wordsData = wordsResponse.data\n\n\t\t\t// 加载用户学习数据\n\t\t\tconst userStudyResponse = await uni.request({\n\t\t\t\turl: '/static/data/user-study.json',\n\t\t\t\tmethod: 'GET'\n\t\t\t})\n\t\t\tthis.userStudyData = userStudyResponse.data\n\n\t\t\tconsole.log('数据加载成功')\n\t\t\treturn true\n\t\t} catch (error) {\n\t\t\tconsole.error('数据加载失败:', error)\n\t\t\treturn false\n\t\t}\n\t}\n\n\t/**\n\t * 获取所有单词分类\n\t */\n\tgetCategories() {\n\t\treturn this.wordsData?.categories || []\n\t}\n\n\t/**\n\t * 根据分类获取单词列表\n\t */\n\tgetWordsByCategory(categoryId) {\n\t\tif (!this.wordsData?.words) return []\n\t\t\n\t\tif (categoryId === 'all') {\n\t\t\treturn this.wordsData.words\n\t\t}\n\t\t\n\t\treturn this.wordsData.words.filter(word => word.category === categoryId)\n\t}\n\n\t/**\n\t * 根据ID获取单词详情\n\t */\n\tgetWordById(wordId) {\n\t\treturn this.wordsData?.words?.find(word => word.id === wordId) || null\n\t}\n\n\t/**\n\t * 获取用户学习进度\n\t */\n\tgetUserProgress() {\n\t\treturn this.userStudyData?.studyStats || {}\n\t}\n\n\t/**\n\t * 获取单词学习进度\n\t */\n\tgetWordProgress(wordId) {\n\t\treturn this.userStudyData?.wordProgress?.[wordId] || null\n\t}\n\n\t/**\n\t * 获取今日需要复习的单词\n\t */\n\tgetTodayReviewWords() {\n\t\tconst today = new Date().toISOString().split('T')[0]\n\t\tconst reviewWords = []\n\t\t\n\t\tObject.values(this.userStudyData?.wordProgress || {}).forEach(progress => {\n\t\t\tif (progress.nextReviewDate === today) {\n\t\t\t\tconst wordData = this.getWordById(progress.wordId)\n\t\t\t\tif (wordData) {\n\t\t\t\t\treviewWords.push({\n\t\t\t\t\t\t...wordData,\n\t\t\t\t\t\tprogress: progress\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t\n\t\treturn reviewWords\n\t}\n\n\t/**\n\t * 获取新单词列表（未学习过的）\n\t */\n\tgetNewWords(categoryId = 'all', limit = 10) {\n\t\tconst categoryWords = this.getWordsByCategory(categoryId)\n\t\tconst newWords = []\n\t\t\n\t\tfor (const word of categoryWords) {\n\t\t\tconst progress = this.getWordProgress(word.id)\n\t\t\tif (!progress || progress.masteryLevel === 0) {\n\t\t\t\tnewWords.push(word)\n\t\t\t\tif (newWords.length >= limit) break\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn newWords\n\t}\n\n\t/**\n\t * 更新单词学习进度\n\t */\n\tupdateWordProgress(wordId, result, studyType = 'review') {\n\t\tif (!this.userStudyData?.wordProgress) {\n\t\t\tthis.userStudyData.wordProgress = {}\n\t\t}\n\n\t\tconst today = new Date().toISOString().split('T')[0]\n\t\tconst progress = this.userStudyData.wordProgress[wordId] || {\n\t\t\twordId: wordId,\n\t\t\tmasteryLevel: 0,\n\t\t\treviewCount: 0,\n\t\t\taccuracy: 0,\n\t\t\tstudyHistory: []\n\t\t}\n\n\t\t// 更新学习历史\n\t\tprogress.studyHistory.push({\n\t\t\tdate: today,\n\t\t\ttype: studyType,\n\t\t\tresult: result,\n\t\t\ttimeSpent: 30 // 默认30秒\n\t\t})\n\n\t\t// 更新掌握等级\n\t\tif (result === 'correct') {\n\t\t\tif (studyType === 'new') {\n\t\t\t\tprogress.masteryLevel = Math.min(progress.masteryLevel + 1, 3)\n\t\t\t} else {\n\t\t\t\tprogress.masteryLevel = Math.min(progress.masteryLevel + 0.5, 3)\n\t\t\t}\n\t\t} else {\n\t\t\tprogress.masteryLevel = Math.max(progress.masteryLevel - 0.5, 0)\n\t\t}\n\n\t\t// 更新复习次数\n\t\tprogress.reviewCount++\n\t\tprogress.lastReviewDate = today\n\n\t\t// 计算下次复习日期（间隔复习算法）\n\t\tconst intervals = [1, 3, 7, 14, 30, 90] // 复习间隔（天）\n\t\tconst intervalIndex = Math.min(progress.reviewCount - 1, intervals.length - 1)\n\t\tconst nextReviewDays = intervals[intervalIndex]\n\t\t\n\t\tconst nextReviewDate = new Date()\n\t\tnextReviewDate.setDate(nextReviewDate.getDate() + nextReviewDays)\n\t\tprogress.nextReviewDate = nextReviewDate.toISOString().split('T')[0]\n\n\t\t// 计算准确率\n\t\tconst recentHistory = progress.studyHistory.slice(-10) // 最近10次\n\t\tconst correctCount = recentHistory.filter(h => h.result === 'correct').length\n\t\tprogress.accuracy = recentHistory.length > 0 ? correctCount / recentHistory.length : 0\n\n\t\tthis.userStudyData.wordProgress[wordId] = progress\n\t\t\n\t\t// 保存到本地存储\n\t\tthis.saveUserStudyData()\n\t\t\n\t\treturn progress\n\t}\n\n\t/**\n\t * 开始学习会话\n\t */\n\tstartStudySession(category = 'all') {\n\t\tthis.currentSession = {\n\t\t\tid: 'session_' + Date.now(),\n\t\t\tdate: new Date().toISOString().split('T')[0],\n\t\t\tstartTime: new Date().toLocaleTimeString(),\n\t\t\tcategory: category,\n\t\t\twordsStudied: 0,\n\t\t\tnewWords: 0,\n\t\t\treviewWords: 0,\n\t\t\tcorrectAnswers: 0,\n\t\t\ttotalAnswers: 0\n\t\t}\n\t}\n\n\t/**\n\t * 结束学习会话\n\t */\n\tendStudySession() {\n\t\tif (!this.currentSession) return null\n\n\t\tthis.currentSession.endTime = new Date().toLocaleTimeString()\n\t\tthis.currentSession.duration = this.calculateSessionDuration()\n\t\tthis.currentSession.accuracy = this.currentSession.totalAnswers > 0 \n\t\t\t? this.currentSession.correctAnswers / this.currentSession.totalAnswers \n\t\t\t: 0\n\n\t\t// 保存会话记录\n\t\tif (!this.userStudyData.studySessions) {\n\t\t\tthis.userStudyData.studySessions = []\n\t\t}\n\t\tthis.userStudyData.studySessions.unshift(this.currentSession)\n\n\t\t// 更新用户统计\n\t\tthis.updateUserStats()\n\n\t\tconst session = this.currentSession\n\t\tthis.currentSession = null\n\t\t\n\t\t// 保存数据\n\t\tthis.saveUserStudyData()\n\t\t\n\t\treturn session\n\t}\n\n\t/**\n\t * 记录学习结果\n\t */\n\trecordStudyResult(wordId, result, studyType = 'review') {\n\t\t// 更新单词进度\n\t\tthis.updateWordProgress(wordId, result, studyType)\n\n\t\t// 更新会话统计\n\t\tif (this.currentSession) {\n\t\t\tthis.currentSession.wordsStudied++\n\t\t\tthis.currentSession.totalAnswers++\n\t\t\t\n\t\t\tif (result === 'correct') {\n\t\t\t\tthis.currentSession.correctAnswers++\n\t\t\t}\n\t\t\t\n\t\t\tif (studyType === 'new') {\n\t\t\t\tthis.currentSession.newWords++\n\t\t\t} else {\n\t\t\t\tthis.currentSession.reviewWords++\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 计算会话时长\n\t */\n\tcalculateSessionDuration() {\n\t\tif (!this.currentSession?.startTime) return 0\n\t\t\n\t\tconst start = new Date(`2000-01-01 ${this.currentSession.startTime}`)\n\t\tconst end = new Date(`2000-01-01 ${this.currentSession.endTime}`)\n\t\treturn Math.round((end - start) / 1000 / 60) // 返回分钟数\n\t}\n\n\t/**\n\t * 更新用户统计\n\t */\n\tupdateUserStats() {\n\t\tif (!this.userStudyData.studyStats) {\n\t\t\tthis.userStudyData.studyStats = {}\n\t\t}\n\n\t\tconst stats = this.userStudyData.studyStats\n\t\tstats.totalStudyTime += this.currentSession.duration || 0\n\t\tstats.lastStudyDate = new Date().toISOString().split('T')[0]\n\n\t\t// 更新连续学习天数\n\t\tconst today = new Date().toISOString().split('T')[0]\n\t\tconst lastStudyDate = stats.lastStudyDate\n\t\t\n\t\tif (lastStudyDate) {\n\t\t\tconst lastDate = new Date(lastStudyDate)\n\t\t\tconst todayDate = new Date(today)\n\t\t\tconst diffDays = Math.round((todayDate - lastDate) / (1000 * 60 * 60 * 24))\n\t\t\t\n\t\t\tif (diffDays === 1) {\n\t\t\t\tstats.currentStreak = (stats.currentStreak || 0) + 1\n\t\t\t} else if (diffDays > 1) {\n\t\t\t\tstats.currentStreak = 1\n\t\t\t}\n\t\t\t\n\t\t\tif (stats.currentStreak > (stats.longestStreak || 0)) {\n\t\t\t\tstats.longestStreak = stats.currentStreak\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 获取学习建议\n\t */\n\tgetStudyRecommendations() {\n\t\tconst recommendations = []\n\t\t\n\t\t// 检查今日目标完成情况\n\t\tconst dailyGoals = this.userStudyData.dailyGoals\n\t\tconst currentDay = dailyGoals.currentDay\n\t\t\n\t\tif (currentDay.newWords < dailyGoals.newWords) {\n\t\t\trecommendations.push({\n\t\t\t\ttype: 'new_words',\n\t\t\t\tmessage: `今日还需学习${dailyGoals.newWords - currentDay.newWords}个新单词`,\n\t\t\t\tpriority: 'high'\n\t\t\t})\n\t\t}\n\t\t\n\t\tif (currentDay.reviewWords < dailyGoals.reviewWords) {\n\t\t\trecommendations.push({\n\t\t\t\ttype: 'review_words',\n\t\t\t\tmessage: `今日还需复习${dailyGoals.reviewWords - currentDay.reviewWords}个单词`,\n\t\t\t\tpriority: 'medium'\n\t\t\t})\n\t\t}\n\t\t\n\t\t// 检查需要复习的单词\n\t\tconst reviewWords = this.getTodayReviewWords()\n\t\tif (reviewWords.length > 0) {\n\t\t\trecommendations.push({\n\t\t\t\ttype: 'scheduled_review',\n\t\t\t\tmessage: `有${reviewWords.length}个单词需要复习`,\n\t\t\t\tpriority: 'high',\n\t\t\t\tdata: reviewWords\n\t\t\t})\n\t\t}\n\t\t\n\t\treturn recommendations\n\t}\n\n\t/**\n\t * 保存用户学习数据到本地存储\n\t */\n\tsaveUserStudyData() {\n\t\ttry {\n\t\t\tuni.setStorageSync('userStudyData', JSON.stringify(this.userStudyData))\n\t\t} catch (error) {\n\t\t\tconsole.error('保存用户数据失败:', error)\n\t\t}\n\t}\n\n\t/**\n\t * 从本地存储加载用户学习数据\n\t */\n\tloadUserStudyDataFromStorage() {\n\t\ttry {\n\t\t\tconst data = uni.getStorageSync('userStudyData')\n\t\t\tif (data) {\n\t\t\t\tthis.userStudyData = JSON.parse(data)\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('加载用户数据失败:', error)\n\t\t}\n\t}\n\n\t/**\n\t * 搜索单词\n\t */\n\tsearchWords(keyword) {\n\t\tif (!this.wordsData?.words) return []\n\t\t\n\t\tconst results = []\n\t\tconst lowerKeyword = keyword.toLowerCase()\n\t\t\n\t\tthis.wordsData.words.forEach(word => {\n\t\t\tif (word.word.toLowerCase().includes(lowerKeyword) ||\n\t\t\t\tword.translations.some(t => t.meaning.includes(keyword)) ||\n\t\t\t\tword.tags.some(tag => tag.includes(keyword))) {\n\t\t\t\tresults.push(word)\n\t\t\t}\n\t\t})\n\t\t\n\t\treturn results\n\t}\n\n\t/**\n\t * 获取难度分布统计\n\t */\n\tgetDifficultyStats() {\n\t\tconst stats = { 1: 0, 2: 0, 3: 0 }\n\t\t\n\t\tthis.wordsData?.words?.forEach(word => {\n\t\t\tstats[word.difficulty] = (stats[word.difficulty] || 0) + 1\n\t\t})\n\t\t\n\t\treturn stats\n\t}\n\n\t/**\n\t * 获取分类统计\n\t */\n\tgetCategoryStats() {\n\t\tconst stats = {}\n\t\t\n\t\tthis.wordsData?.words?.forEach(word => {\n\t\t\tstats[word.category] = (stats[word.category] || 0) + 1\n\t\t})\n\t\t\n\t\treturn stats\n\t}\n}\n\n// 创建单例实例\nconst wordManager = new WordManager()\n\nexport default wordManager\n"],"names":["uni"],"mappings":"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"}