{"version":3,"file":"wordManager.js","sources":["utils/wordManager.js"],"sourcesContent":["import CSVParser from './csvParser.js'\nimport settingsManager from './settingsManager.js'\n\n/**\n * 单词管理器\n */\nclass WordManager {\n\tconstructor() {\n\t\tthis.words = []\n\t\tthis.userStudyData = {}\n\t\tthis.csvParser = new CSVParser()\n\t\tthis.isInitialized = false\n\t\tthis.dailyProgress = {\n\t\t\tdate: null,\n\t\t\tnewWordIds: []\n\t\t}\n\t\tthis.knownWords = []\n\t\tthis.studyStats = {\n\t\t\ttotalStudyDays: 0,\n\t\t\tcurrentStreak: 0,\n\t\t\tlongestStreak: 0,\n\t\t\ttotalStudyTimeMs: 0,\n\t\t\tlastStudyDate: null,\n\t\t\tstudyDates: []\n\t\t}\n\t}\n\t\n\t/**\n\t * 初始化\n\t */\n\tasync init() {\n\t\tif (this.isInitialized) {\n\t\t\treturn\n\t\t}\n\t\t\n\t\ttry {\n\t\t\t// 加载CSV数据\n\t\t\tawait this.loadCSVData()\n\t\t\t\n\t\t\t// 加载用户学习数据\n\t\t\tthis.loadUserStudyDataFromStorage()\n\t\t\t// 加载每日进度\n\t\t\tthis.loadDailyProgressFromStorage()\n\t\t\t// 加载已认识单词列表\n\t\t\tthis.loadKnownWordsFromStorage()\n\t\t\t// 同步已认识单词到学习记录，确保可进入复习流程\n\t\t\tthis.syncKnownWordsToStudyData()\n\t\t\t// 加载学习统计\n\t\t\tthis.loadStudyStatsFromStorage()\n\t\t\t\n\t\t\tthis.isInitialized = true\n\t\t\tconsole.log('WordManager初始化完成，共加载', this.words.length, '个单词')\n\t\t} catch (error) {\n\t\t\tconsole.error('WordManager初始化失败:', error)\n\t\t}\n\t}\n\t\n\t/**\n\t * 加载CSV数据\n\t */\n\tasync loadCSVData() {\n\t\ttry {\n\t\t\t// 读取CSV文件\n\t\t\tconst response = await uni.request({\n\t\t\t\turl: '/static/data/words.csv',\n\t\t\t\tmethod: 'GET'\n\t\t\t})\n\t\t\t\n\t\t\tif (response.statusCode === 200) {\n\t\t\t\tconst csvText = response.data\n\t\t\t\tthis.words = this.csvParser.parseCSV(csvText)\n\t\t\t\tconsole.log('CSV数据加载成功，共', this.words.length, '个单词')\n\t\t\t} else {\n\t\t\t\tthrow new Error('CSV文件加载失败')\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('加载CSV数据失败:', error)\n\t\t\t// 如果CSV加载失败，使用默认数据\n\t\t\tthis.loadDefaultData()\n\t\t}\n\t}\n\t\n\t/**\n\t * 加载默认数据（备用方案）\n\t */\n\tloadDefaultData() {\n\t\t// 这里可以保留一些基本的单词数据作为备用\n\t\tthis.words = [\n\t\t\t{\n\t\t\t\tid: 'w001',\n\t\t\t\tword: 'hello',\n\t\t\t\tphonetic: '/həˈləʊ/',\n\t\t\t\tdefinition: ['used as a greeting or to begin a phone conversation'],\n\t\t\t\ttranslation: ['你好；喂'],\n\t\t\t\tpos: ['interjection'],\n\t\t\t\tcollins: 1,\n\t\t\t\toxford: 1,\n\t\t\t\ttag: ['basic'],\n\t\t\t\tbnc: 1000,\n\t\t\t\tfrq: 500,\n\t\t\t\texchange: ['helloes', 'helloed', 'helloing'],\n\t\t\t\tdetail: {\n\t\t\t\t\texamples: ['Hello, how are you?', 'Hello, this is John speaking.']\n\t\t\t\t},\n\t\t\t\taudio: '',\n\t\t\t\tmasteryLevel: 0,\n\t\t\t\treviewCount: 0,\n\t\t\t\tlastReviewDate: null,\n\t\t\t\tnextReviewDate: null\n\t\t\t}\n\t\t]\n\t\tconsole.log('使用默认数据，共', this.words.length, '个单词')\n\t}\n\t\n\t/**\n\t * 加载用户学习数据\n\t */\n\tloadUserStudyDataFromStorage() {\n\t\ttry {\n\t\t\tconst data = uni.getStorageSync('userStudyData')\n\t\t\tif (data) {\n\t\t\t\tthis.userStudyData = JSON.parse(data)\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('加载用户学习数据失败:', error)\n\t\t\tthis.userStudyData = {}\n\t\t}\n\t}\n\t\n\t/**\n\t * 保存用户学习数据\n\t */\n\tsaveUserStudyDataToStorage() {\n\t\ttry {\n\t\t\tuni.setStorageSync('userStudyData', JSON.stringify(this.userStudyData))\n\t\t} catch (error) {\n\t\t\tconsole.error('保存用户学习数据失败:', error)\n\t\t}\n\t}\n\n\t/** 学习统计：加载/保存/更新 */\n\tloadStudyStatsFromStorage() {\n\t\ttry {\n\t\t\tconst raw = uni.getStorageSync('studyStats')\n\t\t\tif (raw) {\n\t\t\t\tconst parsed = JSON.parse(raw)\n\t\t\t\tthis.studyStats = { ...this.studyStats, ...parsed }\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\tsaveStudyStatsToStorage() {\n\t\ttry { uni.setStorageSync('studyStats', JSON.stringify(this.studyStats)) } catch (e) {}\n\t}\n\n\tmarkStudyCheckIn(dateStr) {\n\t\tconst d = dateStr || new Date().toISOString().split('T')[0]\n\t\tconst set = new Set(this.studyStats.studyDates)\n\t\tif (!set.has(d)) {\n\t\t\tset.add(d)\n\t\t\tthis.studyStats.studyDates = Array.from(set).sort()\n\t\t\tthis.recomputeStreaks()\n\t\t\tthis.saveStudyStatsToStorage()\n\t\t}\n\t}\n\n\trecomputeStreaks() {\n\t\tconst dates = this.studyStats.studyDates\n\t\tif (!dates.length) {\n\t\t\tthis.studyStats.totalStudyDays = 0\n\t\t\tthis.studyStats.currentStreak = 0\n\t\t\tthis.studyStats.longestStreak = 0\n\t\t\treturn\n\t\t}\n\t\tthis.studyStats.totalStudyDays = dates.length\n\t\t// 计算连续天数\n\t\tlet longest = 1, current = 1\n\t\tfor (let i = 1; i < dates.length; i++) {\n\t\t\tconst prev = new Date(dates[i - 1])\n\t\t\tconst cur = new Date(dates[i])\n\t\t\tconst diff = (cur - prev) / (24 * 3600 * 1000)\n\t\t\tif (diff === 1) {\n\t\t\t\tcurrent++\n\t\t\t\tlongest = Math.max(longest, current)\n\t\t\t} else if (diff > 1) {\n\t\t\t\tcurrent = 1\n\t\t\t}\n\t\t}\n\t\t// 如果今天在列表中，current 为当前连续天数，否则计算到最近一天\n\t\tthis.studyStats.currentStreak = current\n\t\tthis.studyStats.longestStreak = Math.max(this.studyStats.longestStreak || 0, longest)\n\t}\n\n\taddStudyTime(ms) {\n\t\tif (!Number.isFinite(ms) || ms <= 0) return\n\t\tthis.studyStats.totalStudyTimeMs += ms\n\t\tthis.saveStudyStatsToStorage()\n\t}\n\n\tgetHomeSummary() {\n\t\t// 待学习：今日目标 - 今日新学，最小不小于0\n\t\tsettingsManager.init()\n\t\tconst target = (settingsManager.getSettings && settingsManager.getSettings().dailyNewWordsTarget) || 20\n\t\tconst learnedToday = this.getTodayNewWordsCount()\n\t\tconst toLearn = Math.max(target - learnedToday, 0)\n\t\t// 待复习：已学习/已认识过的单词总数（去重）\n\t\tconst reviewSet = new Set([\n\t\t\t...Object.keys(this.userStudyData || {}),\n\t\t\t// 将 knownWords(word 文本) 映射为 id\n\t\t\t...this.getKnownWordObjects().map(w => w.id)\n\t\t])\n\t\tconst toReview = reviewSet.size\n\t\t// 已学单词：userStudyData 里出现过的单词数量\n\t\tconst learnedTotal = Object.keys(this.userStudyData || {}).length\n\t\t// 连续学习天数、学习时长（小时，保留一位小数）\n\t\tconst streak = this.studyStats.currentStreak || 0\n\t\tconst hours = Math.round((this.studyStats.totalStudyTimeMs / 3600000) * 10) / 10\n\t\treturn { toLearn, toReview, learnedTotal, streak, hours }\n\t}\n\n\t/** 加载/保存 已认识单词 列表 */\n\tloadKnownWordsFromStorage() {\n\t\ttry {\n\t\t\tconst raw = uni.getStorageSync('knownWords')\n\t\t\tthis.knownWords = raw ? JSON.parse(raw) : []\n\t\t\tif (!Array.isArray(this.knownWords)) {\n\t\t\t\tthis.knownWords = []\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.knownWords = []\n\t\t}\n\t}\n\n\tsaveKnownWordsToStorage() {\n\t\ttry {\n\t\t\tuni.setStorageSync('knownWords', JSON.stringify(this.knownWords))\n\t\t} catch (e) {}\n\t}\n\n\t/**\n\t * 以单词文本进行存储（而非 id）\n\t */\n\taddKnownWord(wordText) {\n\t\tconst key = String(wordText || '').trim()\n\t\tif (!key) return\n\t\tif (!this.knownWords.includes(key)) {\n\t\t\tthis.knownWords.push(key)\n\t\t\tthis.saveKnownWordsToStorage()\n\t\t}\n\t}\n\n\tgetKnownWords() {\n\t\treturn [...this.knownWords]\n\t}\n\n\t/**\n\t * 获取已认识单词对象列表\n\t */\n\tgetKnownWordObjects() {\n\t\tconst set = new Set((this.knownWords || []).map(s => String(s).toLowerCase()))\n\t\treturn this.words.filter(w => set.has(String(w.word).toLowerCase()))\n\t}\n\n\t/**\n\t * 将 knownWords 列表同步到 userStudyData，确保这些词进入复习体系\n\t * 策略：若某词无学习记录，则创建记录并将 nextReviewDate 设为今天\n\t */\n\tsyncKnownWordsToStudyData() {\n\t\tconst today = new Date().toISOString().split('T')[0]\n\t\tif (!Array.isArray(this.knownWords)) return\n\t\t// 将以 word 文本存储的 knownWords 同步到 userStudyData（使用 id 作为学习数据键）\n\t\tconst lowerToWordObj = new Map()\n\t\tthis.words.forEach(w => lowerToWordObj.set(String(w.word).toLowerCase(), w))\n\t\tthis.knownWords.forEach(wordText => {\n\t\t\tconst w = lowerToWordObj.get(String(wordText).toLowerCase())\n\t\t\tif (!w) return\n\t\t\tconst wordId = w.id\n\t\t\tif (!this.userStudyData[wordId]) {\n\t\t\t\tthis.userStudyData[wordId] = {\n\t\t\t\t\tmasteryLevel: 1,\n\t\t\t\t\treviewCount: 0,\n\t\t\t\t\tlastReviewDate: null,\n\t\t\t\t\tnextReviewDate: today,\n\t\t\t\t\tstudyHistory: [{ date: today, isCorrect: true, timestamp: Date.now(), source: 'knownWords-import' }]\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tthis.saveUserStudyDataToStorage()\n\t}\n\n\t/**\n\t * 加载每日进度\n\t */\n\tloadDailyProgressFromStorage() {\n\t\ttry {\n\t\t\tconst raw = uni.getStorageSync('dailyProgress')\n\t\t\tif (raw) {\n\t\t\t\tthis.dailyProgress = JSON.parse(raw)\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.dailyProgress = { date: null, newWordIds: [] }\n\t\t}\n\t\t// 日期切换则重置\n\t\tconst today = new Date().toISOString().split('T')[0]\n\t\tif (this.dailyProgress.date !== today) {\n\t\t\tthis.dailyProgress = { date: today, newWordIds: [] }\n\t\t\tthis.saveDailyProgressToStorage()\n\t\t}\n\t}\n\n\t/**\n\t * 保存每日进度\n\t */\n\tsaveDailyProgressToStorage() {\n\t\ttry {\n\t\t\tuni.setStorageSync('dailyProgress', JSON.stringify(this.dailyProgress))\n\t\t} catch (e) {}\n\t}\n\n\t/**\n\t * 记录今日新学单词（去重）\n\t */\n\ttrackDailyNew(wordId) {\n\t\tconst today = new Date().toISOString().split('T')[0]\n\t\tif (this.dailyProgress.date !== today) {\n\t\t\tthis.dailyProgress = { date: today, newWordIds: [] }\n\t\t}\n\t\tif (!this.dailyProgress.newWordIds.includes(wordId)) {\n\t\t\tthis.dailyProgress.newWordIds.push(wordId)\n\t\t\tthis.saveDailyProgressToStorage()\n\t\t}\n\t}\n\n\t/**\n\t * 获取今日新学单词数量\n\t */\n\tgetTodayNewWordsCount() {\n\t\tconst today = new Date().toISOString().split('T')[0]\n\t\treturn this.dailyProgress.date === today ? this.dailyProgress.newWordIds.length : 0\n\t}\n\t\n\t/**\n\t * 获取新单词\n\t * @param {string} category - 分类\n\t * @param {number} limit - 限制数量\n\t * @returns {Array} 新单词数组\n\t */\n\tgetNewWords(category = 'all', limit = 10) {\n\t\tlet filteredWords = this.words\n\t\t\n\t\tif (category !== 'all') {\n\t\t\tfilteredWords = this.csvParser.getWordsByTag(category)\n\t\t}\n\t\t\n\t\t// 过滤掉已学习的单词\n\t\tconst newWords = filteredWords.filter(word => {\n\t\t\tconst studyData = this.userStudyData[word.id]\n\t\t\treturn !studyData || studyData.masteryLevel === 0\n\t\t})\n\t\t\n\t\t// 按词频排序，优先学习高频词\n\t\tnewWords.sort((a, b) => a.bnc - b.bnc)\n\t\t\n\t\treturn newWords.slice(0, limit)\n\t}\n\t\n\t/**\n\t * 根据标签获取新单词\n\t * @param {string} tag - 标签\n\t * @param {number} limit - 限制数量\n\t * @returns {Array} 新单词数组\n\t */\n\tgetNewWordsByTag(tag, limit = 10) {\n\t\tconst filteredWords = this.csvParser.getWordsByTag(tag)\n\t\t\n\t\t// 过滤掉已学习的单词\n\t\tconst newWords = filteredWords.filter(word => {\n\t\t\tconst studyData = this.userStudyData[word.id]\n\t\t\treturn !studyData || studyData.masteryLevel === 0\n\t\t})\n\t\t\n\t\t// 按词频排序，优先学习高频词\n\t\tnewWords.sort((a, b) => a.bnc - b.bnc)\n\t\t\n\t\treturn newWords.slice(0, limit)\n\t}\n\t\n\t/**\n\t * 根据多个标签获取新单词\n\t * @param {Array} tags - 标签数组\n\t * @param {number} limit - 限制数量\n\t * @returns {Array} 新单词数组\n\t */\n\tgetNewWordsByTags(tags, limit = 10) {\n\t\tconst filteredWords = this.csvParser.getWordsByTags(tags)\n\t\t\n\t\t// 过滤掉已学习的单词\n\t\tconst newWords = filteredWords.filter(word => {\n\t\t\tconst studyData = this.userStudyData[word.id]\n\t\t\treturn !studyData || studyData.masteryLevel === 0\n\t\t})\n\t\t\n\t\t// 按词频排序，优先学习高频词\n\t\tnewWords.sort((a, b) => a.bnc - b.bnc)\n\t\t\n\t\treturn newWords.slice(0, limit)\n\t}\n\t\n\t/**\n\t * 获取今日待复习单词\n\t * @returns {Array} 待复习单词数组\n\t */\n\tgetTodayReviewWords() {\n\t\tconst today = new Date().toISOString().split('T')[0]\n\t\tconst reviewWords = []\n\t\t\n\t\t// 先同步一次，避免 knownWords 未落入 studyData 的情况\n\t\tthis.syncKnownWordsToStudyData()\n\t\t\n\t\tObject.keys(this.userStudyData).forEach(wordId => {\n\t\t\tconst studyData = this.userStudyData[wordId]\n\t\t\tif (studyData && studyData.nextReviewDate === today) {\n\t\t\t\tconst word = this.words.find(w => w.id === wordId)\n\t\t\t\tif (word) {\n\t\t\t\t\treviewWords.push({\n\t\t\t\t\t\t...word,\n\t\t\t\t\t\t...studyData\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t\n\t\treturn reviewWords\n\t}\n\t\n\t/**\n\t * 记录学习结果\n\t * @param {string} wordId - 单词ID\n\t * @param {boolean} isCorrect - 是否正确\n\t */\n\trecordStudyResult(wordId, isCorrect) {\n\t\tconst word = this.words.find(w => w.id === wordId)\n\t\tif (!word) {\n\t\t\tconsole.error('单词不存在:', wordId)\n\t\t\treturn\n\t\t}\n\t\t\n\t\tif (!this.userStudyData[wordId]) {\n\t\t\tthis.userStudyData[wordId] = {\n\t\t\t\tmasteryLevel: 0,\n\t\t\t\treviewCount: 0,\n\t\t\t\tlastReviewDate: null,\n\t\t\t\tnextReviewDate: null,\n\t\t\t\tstudyHistory: []\n\t\t\t}\n\t\t}\n\t\t\n\t\tconst studyData = this.userStudyData[wordId]\n\t\tconst today = new Date().toISOString().split('T')[0]\n\t\t\n\t\t// 记录学习历史\n\t\tstudyData.studyHistory.push({\n\t\t\tdate: today,\n\t\t\tisCorrect: isCorrect,\n\t\t\ttimestamp: Date.now()\n\t\t})\n\t\t\n\t\t// 更新掌握等级\n\t\tif (isCorrect) {\n\t\t\tstudyData.masteryLevel = Math.min(studyData.masteryLevel + 1, 5)\n\t\t} else {\n\t\t\tstudyData.masteryLevel = Math.max(studyData.masteryLevel - 1, 0)\n\t\t}\n\t\t\n\t\tstudyData.reviewCount++\n\t\tstudyData.lastReviewDate = today\n\t\t\n\t\t// 计算下次复习日期（间隔重复算法）\n\t\tstudyData.nextReviewDate = this.calculateNextReviewDate(studyData.masteryLevel, today)\n\t\t\n\t\t// 保存数据\n\t\tthis.saveUserStudyDataToStorage()\n\t}\n\t\n\t/**\n\t * 计算下次复习日期\n\t * @param {number} masteryLevel - 掌握等级\n\t * @param {string} lastReviewDate - 上次复习日期\n\t * @returns {string} 下次复习日期\n\t */\n\tcalculateNextReviewDate(masteryLevel, lastReviewDate) {\n\t\tconst intervals = [1, 3, 7, 14, 30, 90] // 间隔天数\n\t\tconst interval = intervals[Math.min(masteryLevel, intervals.length - 1)]\n\t\t\n\t\tconst lastDate = new Date(lastReviewDate)\n\t\tconst nextDate = new Date(lastDate.getTime() + interval * 24 * 60 * 60 * 1000)\n\t\t\n\t\treturn nextDate.toISOString().split('T')[0]\n\t}\n\t\n\t/**\n\t * 获取单词详情\n\t * @param {string} wordId - 单词ID\n\t * @returns {Object} 单词详情\n\t */\n\tgetWordDetail(wordId) {\n\t\tconst word = this.words.find(w => w.id === wordId)\n\t\tif (!word) {\n\t\t\treturn null\n\t\t}\n\t\t\n\t\tconst studyData = this.userStudyData[wordId] || {\n\t\t\tmasteryLevel: 0,\n\t\t\treviewCount: 0,\n\t\t\tlastReviewDate: null,\n\t\t\tnextReviewDate: null\n\t\t}\n\t\t\n\t\treturn {\n\t\t\t...word,\n\t\t\t...studyData\n\t\t}\n\t}\n\t\n\t/**\n\t * 搜索单词\n\t * @param {string} query - 搜索查询\n\t * @returns {Array} 搜索结果\n\t */\n\tsearchWords(query) {\n\t\treturn this.csvParser.searchWords(query)\n\t}\n\t\n\t/**\n\t * 获取随机单词\n\t * @param {number} count - 数量\n\t * @param {Array} excludeIds - 排除的单词ID数组\n\t * @returns {Array} 随机单词数组\n\t */\n\tgetRandomWords(count = 1, excludeIds = []) {\n\t\treturn this.csvParser.getRandomWords(count, excludeIds)\n\t}\n\t\n\t/**\n\t * 获取分类信息\n\t * @returns {Object} 分类信息\n\t */\n\tgetCategories() {\n\t\treturn this.csvParser.getCategories()\n\t}\n\t\n\t/**\n\t * 获取分类列表\n\t * @returns {Array} 分类列表\n\t */\n\tgetCategoryList() {\n\t\treturn this.csvParser.getCategoryList()\n\t}\n\t\n\t/**\n\t * 获取学习统计\n\t * @returns {Object} 学习统计\n\t */\n\tgetStudyStats() {\n\t\tconst totalWords = this.words.length\n\t\tconst learnedWords = Object.keys(this.userStudyData).length\n\t\tconst masteredWords = Object.values(this.userStudyData).filter(data => data.masteryLevel >= 3).length\n\t\tconst todayReviewWords = this.getTodayReviewWords().length\n\t\t\n\t\treturn {\n\t\t\ttotalWords,\n\t\t\tlearnedWords,\n\t\t\tmasteredWords,\n\t\t\ttodayReviewWords,\n\t\t\tprogress: Math.round((learnedWords / totalWords) * 100)\n\t\t}\n\t}\n\t\n\t/**\n\t * 获取学习建议\n\t * @returns {Array} 学习建议数组\n\t */\n\tgetStudyRecommendations() {\n\t\tconst recommendations = []\n\t\tconst stats = this.getStudyStats()\n\t\t\n\t\t// 检查是否有新单词可学习\n\t\tconst newWordsCount = this.getNewWords('all', 100).length\n\t\tif (newWordsCount > 0) {\n\t\t\trecommendations.push({\n\t\t\t\tmessage: `有${newWordsCount}个新单词等待学习`\n\t\t\t})\n\t\t}\n\t\t\n\t\t// 检查是否有待复习的单词\n\t\tconst reviewWordsCount = this.getTodayReviewWords().length\n\t\tif (reviewWordsCount > 0) {\n\t\t\trecommendations.push({\n\t\t\t\tmessage: `有${reviewWordsCount}个单词需要复习`\n\t\t\t})\n\t\t}\n\t\t\n\t\t// 检查学习进度\n\t\tif (stats.progress < 10) {\n\t\t\trecommendations.push({\n\t\t\t\tmessage: '建议每天学习10-20个新单词'\n\t\t\t})\n\t\t}\n\t\t\n\t\treturn recommendations\n\t}\n}\n\nexport default new WordManager()\n"],"names":["CSVParser","uni","settingsManager"],"mappings":"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"}